# loading necessary assemblies

using assembly Microsoft.VisualBasic;
using assembly System.Net.Http;
using assembly System.Windows.Forms;
using assembly System.Console;
using assembly System.IO;

# Clears Console
try{
    clear;
    [System.Console]::Clear()}
    
}
catch{};

# Patterns assigned to variables to be used REGEX
# in order to parse web page for possible parent circuit(s)
# and/or child circuit(s)

$ccsdPattern = "class=rowLight >(.*?)</td>";
$childCCSDPattern = "<div ID='TV(.*?)0chlds'><IMG";
$childCCSDPattern2 = "inpCCSD=(*.?)'";
$parentCCSDPattern = "rides the following circuit";

# Arrays used to hold valid/invalid circuits for final output
# the $checked CCSDs array is to make sure that no CCSDs are checked twice

$validArray = [System.Collections.Generic.List[System.Object]]@();
$invalidArray =  [System.Collections.Generic.List[System.Object]]@();
$checkedCCSDs = [System.Collections.Generic.List[System.Object]]@();

# This is for selecting the text file with the CCSDs to be used as reference

$fileBrowser = [System.Windows.Forms.OpenFileDialog]::new();

[void]$fileBrowser.ShowDialog();

# If statement for when the sure selects 'Cancel'

if($fileBrowser.FileName -eq ''){
    [System.Console]::BackgroundColor="Gray";
    [System.Console]::ForegroundColor="Red";
    [System.Console]::WriteLine("`r`nOperation was cancelled by user.`r`n");
    [System.Console]::BackgroundColor="DarkMagenta";
    [System.Console]::ForegroundColor="White";
    break
};

# ElseIf statement for when the uer selects a file other than a text file

elseif ($fileBrowser.FileName -notmatch '.txt$'){
    [System.Console]::BackgroundColor="Gray";
    [System.Console]::ForegroundColor="Red";
    [System.Console]::WriteLine("`r`nInvalid File Type`r`n");
    [System.Console]::BackgroundColor="DarkMagenta";
    [System.Console]::ForegroundColor="White";
    break
};

# Try/Catch in case the previous ElseIf block did not catch the invalid file
# Also creates a definitive list that removes duplicates from the original

try{
$rawCCSDList = [System.Collections.Generic.List[System.Object]]([System.IO.File]::ReadAllLines(
$fileBrowser.FileName));
$rawCCSDList.TrimExcess();
$ccsdList = $rawCCSDList | select -Unique
[int]$ccsdCount = $ccsdList.count;}
catch{
    [System.Console]::BackgroundColor="Gray";
    [System.Console]::ForegroundColor="Red";
    [System.Console]::WriteLine("`r`nInvalid File Type`r`n");
    [System.Console]::BackgroundColor="DarkMagenta";
    [System.Console]::ForegroundColor="White";
    break
};

# HttpClient and Client Handler used to send web requests back and forth to CENTCOM server #

$httpClientHandler = [System.Net.Http.HttpClientHandler]::new();
$httpClientHandler.SslProtocol = 'Tls12';
$httpClientHandler.ClientCertificateOptions = 'Automatic';
$httpClient = [System.Net.Http.HttpClient]::new($httpClientHandler);
$webPortal = "PLACE WEB ADDRESS HERE"

# First request sent to webportal using the client via GetAsync Method and collaing the Result property from the Response;
# then putting the result from the response into a variable <$httpResponse>

$httpResponse = $httpClient.etAsync($webPortal).Result;

# Creating a GET request using the uri sent from the previous reponse

$httpRequest = [System.Net.Http.HttpRequestMessage]::new('GET', $httpResponse.RequestMessage.RequestUri.AbsoluteUri);
